eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=api-gateway

logging.level.root=INFO
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator=INFO
logging.level.org.springframework.cloud.gateway=TRACE

##Product Service Route
spring.cloud.gateway.routes[0].id=product-service
##API Gateway acts as an Load Balancer. So by keeping 'lb' it acts as client side load balancer
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product


##Order Service Route
spring.cloud.gateway.routes[1].id=order-service
##API Gateway acts as an Load Balancer. So by keeping 'lb' it acts as client side load balancer
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order

##Discovery Service Route
## Reference from API Gateway Documentation from Spring Cloud
spring.cloud.gateway.routes[2].id=discovery-server
##API Gateway acts as an Load Balancer. So by keeping 'lb' it acts as client side load balancer
spring.cloud.gateway.routes[2].uri=http://localhost:8761
spring.cloud.gateway.routes[2].predicates[0]=Path=/eureka/web
## http://localhost:8080/eureka/web. It should be like this But we will get error because it navigates to 8761/eureka which is not there
## In order to avoid this we will use Filters.
spring.cloud.gateway.routes[2].filters[0]=SetPath=/
## From above  it filter ths /eureka/web and it as soon as type http://localhost:8080/eureka/web, it redirects to http://localhost:8761



##Discovery Service Static Route
##The above one is loading only (HTML) content page. So again we are writing to pass so that CSS page will load

spring.cloud.gateway.routes[3].id=discovery-server-static
spring.cloud.gateway.routes[3].uri=http://localhost:8761
spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**
